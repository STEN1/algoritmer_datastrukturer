----Denne oppgaven består av flere deloppgaver fra tidligere eksamensoppgaver.
----Jobb helst i grupper (2-3).-----------------------------------

----Eksamensoppgave 2018 - 3a (sortering)-------------------------
	Skriv en funksjon som regner ut gjennomsnittlig sorteringstid når man generer
	og sorterer n tilfeldige heltall for n = 10, 100, 1000, 10000. Funksjonen skal gjøre
	mange sorteringer for hver verdi av n. Bruk først innstikksortering og deretter
	flettesortering. Skriv ut resultatene.

----Eksamensoppgave 2019 - 2b (flettesortering)-------------------
----skal her gjøres som en programmeringsoppgave------------------
	Anta nå at tallene skal sortertes med mergesort. Sett opp en tabell som
	viser hvordan hele sorteringen foregår, helt til du har en ferdig sortert
	array. Forklar med tekst i tillegg.

----Eksamensoppgave 2019 - 3a (hashing)---------------------------
Følgende C++ kode er gitt:

using namespace std;
struct Test 
{
	int key;
	std::string s;
	bool operator == (const Test& t2) const { return key == t2.key; }
};

namespace std 
{
	template<>
	class hash<Test> 
	{
	public:
		size_t operator() (const Test& t) const 
		{
			return t.key % 7;
		}
		bool operator() (const Test& t1, const Test& t2) 
		{
			return t1.key == t2.key;
		}
	};
}
int main(int argc, char *argv[])
{
	hash<Test> hashtabell;
	unordered_set<Test> uordnet_sett;
}
	a) (programmering) Skriv kode for å sette inn poster med nøkler 12, 13, 20,
	21, 1, 2, 3, 4, 5, 6 i uordnet_sett i opplistet rekkefølge.

----Eksamensoppgave 2019 - 4a,b (grafer)------------------------------
----(programmering) I denne oppgaven skal du bruke kode som er gitt til slutt i
----oppgaven, uten endringer.-----------------------------------------
	a) Implementer funksjonene Node::settinn_kant(), Graf::settinn_node() og
	Graf::finn_node(). I sistnevnte funksjon skal du benytte den interne strukturen til
	å søke etter en node med gitt navn. Funksjonen skal returnere en
	peker til noden dersom den fins, og nullptr ellers.

	b) 1. Implementer funksjonen Graf::settinn_kant()
	2. Lag en testgraf i main() med noder {A, B, C, D og E} og
	kanter {AB(1.0), AC(2.0), BC(2.0), CD(3.0), DE(1.0), AE(5.0),
	CE(4.0}

#include <iostream>
#include <list>
#include <queue>
using namespace std;
struct Kant;
struct Node 
{
	char m_navn;
	bool m_besokt;
	std::list<Kant> m_kanter;
	Node(char navn) : m_navn(navn), m_besokt(false) { }
	void settinn_kant(const Kant &kant);
};
struct Kant 
{
	float m_vekt;
	Node* m_tilnode;
	Kant(float vekt, Node* tilnode) : m_vekt(vekt), m_tilnode(tilnode) { }
	bool operator > (const Kant& k) const { return m_vekt > k.m_vekt; }
};
struct Graf 
{
	std::list<Node*> noder;
	Graf() { }
	Node* finn_node(char navn);
	void settinn_node(char navn);
	void settinn_kant(char fra_navn, char til_navn, float vekt);
	float mst();
};
----Implementer Dijkstra's algoritme for oppgaven ovenfor.-------------------------